###
### To be added to Logstash config
###

### TODO: There is one line that needs to be modified for each zone!

filter {

  if ( [filter_code] =~ "apel" or [filter_code] =~ "de.dkrz.seadata.filter_code.apel.20190313" ) and
     ( [log_type] =~ "quota_stats" ) {

    mutate { add_field => { "steps" => "starting B2SAFE / APEL filter (quota_stats)" } }

    json {
      source => "message"
    }

    ruby {
      code => '
               groups = {}
               event.get("groups").each { |name, members|
                 groups[name] = members.join(",")
               }
               event.set("group_membership", groups)
               tempArray = []
               event.get("collections").each { |k, v|
                 localTuple = {"path" => k, 
                               "size" => v["size"],
                               "objects" => v["objects"],
                               "record_type" => "total"
                              }
                 tempArray << localTuple
                 v["groups"].each { |name, stats|
                   localTuple = {"path" => k,
                                 "size" => stats["size"],
                                 "objects" => stats["objects"],
                                 "record_type" => "group",
                                 "group" => name
                                }
                   if localTuple["objects"] > 0 
                     tempArray << localTuple
                   end
                 }
                 v["users"].each { |name, stats|
                   localTuple = {"path" => k,
                                 "size" => stats["size"],
                                 "objects" => stats["objects"],
                                 "record_type" => "user",
                                 "user" => name
                                }
                   if localTuple["objects"] > 0
                     tempArray << localTuple
                   end
                 }
               }
               event.set("collection", tempArray)
      '
      remove_field => "collections"
      remove_field => "groups"
    }
 
    split {
      field => "collection"
    }

    # To find out whether it is about the root collection:
    # Non-generic way:
    #if [collection][path] == "/sdcDKRZ" {     ### TODO: Adapt this to your zone!
    #  mutate { add_field => { "level" => "root" } }
    #}
    # Generic way:
    mutate { add_field => { "path_copy" => "%{[collection][path]}" } }
    mutate { split => { "path_copy" => "/" } }
    ruby {
      code => '
              event.set("_length", event.get("path_copy").length)
      '
    }
    if [_length] > 2 {
      mutate {
        add_field => { "level" => "not_root" }
        remove_field => "path_copy"
        remove_field => "_length"
      }
    } else {
      mutate {
        add_field => { "level" => "root" }
        remove_field => "path_copy"
        remove_field => "_length"
      }
    }

    mutate {
      rename => [
                 "[collection][size]", "size",
                 "[collection][objects]", "objects",
                 "[collection][path]", "path",
                 "[collection][record_type]", "record_type",
                 "[collection][user]", "user",
                 "[collection][group]", "group"
                ]
      remove_field => "collection" 
      remove_field => "group_membership"
    }
    mutate { add_field => { "steps" => "done with B2SAFE / APEL filter" } }

  }
}

